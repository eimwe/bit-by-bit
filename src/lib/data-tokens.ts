import {
  Connection,
  PublicKey,
  Keypair,
  Transaction,
  SystemProgram,
} from "@solana/web3.js";
import {
  getOrCreateAssociatedTokenAccount,
  createMintToInstruction,
  TOKEN_PROGRAM_ID,
  MINT_SIZE,
  createInitializeMintInstruction,
} from "@solana/spl-token";
import type { DataTokenMetadata } from "@/components/solana/types";

// –®–∞–±–ª–æ–Ω—ã —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
export const DATA_TYPES = [
  {
    id: "location",
    name: "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è",
    description: "–í–∞—à–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏ –ø–æ—Å–µ—â–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥",
    basePrice: 0.1,
    privacy: "medium" as const,
    icon: "üó∫Ô∏è",
    examples: [
      "–ú–∞—Ä—à—Ä—É—Ç—ã –ø–æ–µ–∑–¥–æ–∫",
      "–ß–∞—Å—Ç–æ –ø–æ—Å–µ—â–∞–µ–º—ã–µ –º–µ—Å—Ç–∞",
      "–í—Ä–µ–º—è –≤ –ª–æ–∫–∞—Ü–∏—è—Ö",
    ],
  },
  {
    id: "purchases",
    name: "üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫",
    description: "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è",
    basePrice: 0.05,
    privacy: "high" as const,
    icon: "üõí",
    examples: ["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤", "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", "–ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–∫—É–ø–æ–∫"],
  },
  {
    id: "health",
    name: "üí™ –§–∏—Ç–Ω–µ—Å –¥–∞–Ω–Ω—ã–µ",
    description: "–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, –ø—É–ª—å—Å, —Å–æ–Ω, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
    basePrice: 0.08,
    privacy: "medium" as const,
    icon: "‚åö",
    examples: ["–®–∞–≥–∏ –≤ –¥–µ–Ω—å", "–ö–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞", "–¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"],
  },
  {
    id: "social",
    name: "üë• –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    description: "–ò–Ω—Ç–µ—Ä–µ—Å—ã, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö",
    basePrice: 0.03,
    privacy: "low" as const,
    icon: "üì±",
    examples: ["–¢–µ–º–∞—Ç–∏–∫–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤", "–í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", "–†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç"],
  },
  {
    id: "browsing",
    name: "üåê –í–µ–±-–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    description: "–ü–æ—Å–µ—â–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã –∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã",
    basePrice: 0.02,
    privacy: "medium" as const,
    icon: "üîç",
    examples: ["–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∞–π—Ç–æ–≤", "–í—Ä–µ–º—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", "–ü–æ–∏—Å–∫–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã"],
  },
];

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
export const createDataToken = async (
  connection: Connection,
  payer: PublicKey,
  signTransaction: (transaction: Transaction) => Promise<Transaction>,
  metadata: Omit<
    DataTokenMetadata,
    "id" | "mint" | "created" | "totalEarnings" | "usageCount"
  >
): Promise<{ mint: PublicKey; signature: string }> => {
  try {
    console.log("Creating data token for:", metadata.name);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π mint –∞–∫–∫–∞—É–Ω—Ç
    const mintKeypair = Keypair.generate();
    const mint = mintKeypair.publicKey;

    // –í—ã—á–∏—Å–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è mint –∞–∫–∫–∞—É–Ω—Ç–∞
    const mintRent = await connection.getMinimumBalanceForRentExemption(
      MINT_SIZE
    );

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = new Transaction().add(
      // –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è mint
      SystemProgram.createAccount({
        fromPubkey: payer,
        newAccountPubkey: mint,
        space: MINT_SIZE,
        lamports: mintRent,
        programId: TOKEN_PROGRAM_ID,
      }),
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º mint
      createInitializeMintInstruction(
        mint,
        0, // decimals (0 –¥–ª—è NFT-–ø–æ–¥–æ–±–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤)
        payer, // mint authority
        payer, // freeze authority
        TOKEN_PROGRAM_ID
      )
    );

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π blockhash
    const { blockhash } = await connection.getLatestBlockhash();
    transaction.recentBlockhash = blockhash;
    transaction.feePayer = payer;

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    transaction.partialSign(mintKeypair);
    const signedTransaction = await signTransaction(transaction);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const signature = await connection.sendRawTransaction(
      signedTransaction.serialize()
    );
    await connection.confirmTransaction(signature);

    console.log("Data token created successfully:", {
      mint: mint.toString(),
      signature,
    });

    return { mint, signature };
  } catch (error) {
    console.error("Error creating data token:", error);
    throw error;
  }
};

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ
export const mintDataTokens = async (
  connection: Connection,
  payer: PublicKey,
  signTransaction: (transaction: Transaction) => Promise<Transaction>,
  mint: PublicKey,
  amount: number = 1000000 // —Å–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
): Promise<string> => {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∞—Å—Å–æ—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –∞–∫–∫–∞—É–Ω—Ç
    const tokenAccount = await getOrCreateAssociatedTokenAccount(
      connection,
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π keypair –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–¥–ø–∏—Å–∏)
      Keypair.generate(),
      mint,
      payer,
      false,
      "confirmed"
    );

    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –º–∏–Ω—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤
    const mintToInstruction = createMintToInstruction(
      mint,
      tokenAccount.address,
      payer,
      amount,
      [],
      TOKEN_PROGRAM_ID
    );

    // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    const transaction = new Transaction().add(mintToInstruction);

    const { blockhash } = await connection.getLatestBlockhash();
    transaction.recentBlockhash = blockhash;
    transaction.feePayer = payer;

    const signedTransaction = await signTransaction(transaction);
    const signature = await connection.sendRawTransaction(
      signedTransaction.serialize()
    );

    await connection.confirmTransaction(signature);

    return signature;
  } catch (error) {
    console.error("Error minting data tokens:", error);
    throw error;
  }
};

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
export const calculateTokenPrice = (
  basePrice: number,
  privacy: string,
  demand: number = 1
): number => {
  const privacyMultiplier = {
    low: 1,
    medium: 1.5,
    high: 2.5,
  };

  const privacyFactor =
    privacyMultiplier[privacy as keyof typeof privacyMultiplier] || 1;
  const demandFactor = Math.max(0.5, Math.min(3, 1 + (demand - 1) * 0.1));

  return basePrice * privacyFactor * demandFactor;
};

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
export const generateMockDataSample = (dataType: string) => {
  const samples = {
    location: {
      totalLocations: 47,
      topAreas: ["–¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞", "–¢–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã", "–ü–∞—Ä–∫–∏"],
      avgDistance: "12.3 –∫–º/–¥–µ–Ω—å",
      peakHours: "18:00-20:00",
    },
    purchases: {
      categories: ["–ü—Ä–æ–¥—É–∫—Ç—ã", "–û–¥–µ–∂–¥–∞", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"],
      avgCheck: 2847,
      frequency: "3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é",
      preferredTime: "–í—ã—Ö–æ–¥–Ω—ã–µ",
    },
    health: {
      avgSteps: 8542,
      sleepQuality: "7.2/10",
      activeHours: "2.5 —á/–¥–µ–Ω—å",
      heartRate: "72 —É–¥/–º–∏–Ω",
    },
    social: {
      interests: ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–°–ø–æ—Ä—Ç", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"],
      engagement: "–í—ã—Å–æ–∫–∞—è",
      activeTime: "–í–µ—á–µ—Ä–æ–º",
      platform: "Instagram, YouTube",
    },
    browsing: {
      topSites: ["YouTube", "GitHub", "Medium"],
      categories: ["IT", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ù–æ–≤–æ—Å—Ç–∏"],
      avgSession: "15 –º–∏–Ω",
      devices: "Desktop (70%), Mobile (30%)",
    },
  };

  return samples[dataType as keyof typeof samples] || {};
};
